name: CI - Target-Aware Testing

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  workflow_dispatch:

jobs:
  # Job 1: Read spec and determine targets
  detect-targets:
    name: Detect Build Targets
    runs-on: ubuntu-latest
    outputs:
      targets: ${{ steps.read-spec.outputs.targets }}
      has-web: ${{ steps.read-spec.outputs.has-web }}
      has-backend: ${{ steps.read-spec.outputs.has-backend }}
      has-mobile: ${{ steps.read-spec.outputs.has-mobile }}
      project-name: ${{ steps.read-spec.outputs.project-name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read BuildSpec and detect targets
        id: read-spec
        run: |
          # Check if workspace/spec.json exists
          if [ -f "workspace/spec.json" ]; then
            SPEC_FILE="workspace/spec.json"
          elif [ -f "spec.json" ]; then
            SPEC_FILE="spec.json"
          else
            echo "No spec.json found, defaulting to web target"
            echo "targets=[\"web\"]" >> $GITHUB_OUTPUT
            echo "has-web=true" >> $GITHUB_OUTPUT
            echo "has-backend=false" >> $GITHUB_OUTPUT
            echo "has-mobile=false" >> $GITHUB_OUTPUT
            echo "project-name=unknown" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Parse targets from spec
          TARGETS=$(cat $SPEC_FILE | jq -r '.targets | @json')
          PROJECT_NAME=$(cat $SPEC_FILE | jq -r '.name // "unknown"')

          echo "targets=$TARGETS" >> $GITHUB_OUTPUT
          echo "project-name=$PROJECT_NAME" >> $GITHUB_OUTPUT

          # Set boolean flags for conditional jobs
          if echo "$TARGETS" | jq -e 'index("web")' > /dev/null; then
            echo "has-web=true" >> $GITHUB_OUTPUT
          else
            echo "has-web=false" >> $GITHUB_OUTPUT
          fi

          if echo "$TARGETS" | jq -e 'index("backend")' > /dev/null; then
            echo "has-backend=true" >> $GITHUB_OUTPUT
          else
            echo "has-backend=false" >> $GITHUB_OUTPUT
          fi

          if echo "$TARGETS" | jq -e 'index("mobile")' > /dev/null; then
            echo "has-mobile=true" >> $GITHUB_OUTPUT
          else
            echo "has-mobile=false" >> $GITHUB_OUTPUT
          fi

          echo "📋 Detected targets: $TARGETS"
          echo "🏗️ Project: $PROJECT_NAME"

  # Job 2: Web build and test (conditional)
  web-build-test:
    name: Web - Build & Test
    runs-on: ubuntu-latest
    needs: detect-targets
    if: needs.detect-targets.outputs.has-web == 'true'
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            apps/web/package-lock.json

      - name: Install root dependencies
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm i --no-audit --no-fund; fi
          npm i --no-save @playwright/test yaml fs-extra wait-on

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Install and build web app
        working-directory: apps/web
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm i --no-audit --no-fund; fi
          npm run build

      - name: Start web app
        run: |
          cd apps/web
          nohup npm start -- -p 3000 >/tmp/web.log 2>&1 &
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run UI smoke tests
        env:
          WORKSPACE: ${{ github.workspace }}
        run: |
          if [ -f "checklists/auth.yaml" ]; then
            node tools/ui-runner-cli.js checklists/auth.yaml http://localhost:3000
          elif [ -f "checklists/web-smoke.yaml" ]; then
            node tools/ui-runner-cli.js checklists/web-smoke.yaml http://localhost:3000
          else
            echo "⚠️ No web smoke tests found"
          fi

      - name: Upload UI screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ui-screenshots
          path: |
            artifacts/ui/**/*
            workspace/artifacts/ui/**/*
          retention-days: 7
          if-no-files-found: warn

      - name: Upload web logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: web-logs
          path: /tmp/web.log
          retention-days: 7
          if-no-files-found: ignore

  # Job 3: Backend API smoke tests (conditional)
  backend-api-test:
    name: Backend - API Smoke Tests
    runs-on: ubuntu-latest
    needs: detect-targets
    if: needs.detect-targets.outputs.has-backend == 'true'
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start backend service
        run: |
          if [ -d "apps/backend" ]; then
            cd apps/backend
            if [ -f package-lock.json ]; then npm ci; else npm i --no-audit --no-fund; fi
            npm run build || echo "No build script"
            nohup npm start >/tmp/backend.log 2>&1 &
            sleep 5
          else
            echo "⚠️ No backend directory found"
            exit 1
          fi

      - name: Wait for backend to be ready
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:3000/health 2>/dev/null; do echo "Waiting..."; sleep 2; done' || echo "Backend not ready"

      - name: Run API smoke tests
        run: |
          API_BASE_URL=http://localhost:3000 npx jest tests/api-smoke.test.ts --verbose
        continue-on-error: true

      - name: Upload API logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-api-logs
          path: |
            /tmp/backend.log
            apps/backend/**/*.log
            artifacts/logs/**/*
          retention-days: 7
          if-no-files-found: ignore

  # Job 4: Mobile build (conditional, tagged commits or PR labels)
  mobile-build:
    name: Mobile - EAS Build
    runs-on: ubuntu-latest
    needs: detect-targets
    if: |
      needs.detect-targets.outputs.has-mobile == 'true' &&
      (startsWith(github.ref, 'refs/tags/') || contains(github.event.pull_request.labels.*.name, 'needs-mobile-build'))
    timeout-minutes: 60
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Expo
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Install dependencies
        working-directory: apps/mobile
        run: npm ci

      - name: EAS Build
        if: ${{ secrets.EXPO_TOKEN != '' }}
        working-directory: apps/mobile
        run: |
          # Build for both platforms (preview profile)
          eas build --platform all --profile preview --non-interactive || echo "Build submitted"
        continue-on-error: true
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Skip mobile build (no EXPO_TOKEN)
        if: ${{ secrets.EXPO_TOKEN == '' }}
        run: |
          echo "⚠️ EXPO_TOKEN not set. Skipping mobile build."
          echo "Add EXPO_TOKEN to repository secrets to enable mobile builds."

      - name: Upload Maestro test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: maestro-results
          path: |
            apps/mobile/.maestro/**/*
            artifacts/maestro/**/*
            tests/mobile/**/*
          retention-days: 7
          if-no-files-found: ignore

  # Job 5: Summary
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [detect-targets, web-build-test, backend-api-test, mobile-build]
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "## 🎯 CI Results for ${{ needs.detect-targets.outputs.project-name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Detected Targets:** ${{ needs.detect-targets.outputs.targets }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Web results
          if [ "${{ needs.detect-targets.outputs.has-web }}" = "true" ]; then
            if [ "${{ needs.web-build-test.result }}" = "success" ]; then
              echo "✅ **Web**: Build & tests passed" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Web**: Build or tests failed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⏭️ **Web**: Skipped (not in targets)" >> $GITHUB_STEP_SUMMARY
          fi

          # Backend results
          if [ "${{ needs.detect-targets.outputs.has-backend }}" = "true" ]; then
            if [ "${{ needs.backend-api-test.result }}" = "success" ]; then
              echo "✅ **Backend**: API tests passed" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Backend**: API tests failed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⏭️ **Backend**: Skipped (not in targets)" >> $GITHUB_STEP_SUMMARY
          fi

          # Mobile results
          if [ "${{ needs.detect-targets.outputs.has-mobile }}" = "true" ]; then
            if [ "${{ needs.mobile-build.result }}" = "success" ]; then
              echo "✅ **Mobile**: EAS build triggered" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ needs.mobile-build.result }}" = "skipped" ]; then
              echo "⏭️ **Mobile**: Skipped (no tag or 'needs-mobile-build' label)" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ **Mobile**: Build failed or EXPO_TOKEN missing" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⏭️ **Mobile**: Skipped (not in targets)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Screenshots, logs, and test results available in workflow artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Target-aware CI powered by ORK BuildSpec*" >> $GITHUB_STEP_SUMMARY
