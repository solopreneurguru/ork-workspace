name: Preview - Deploy & Test

on:
  pull_request:
    types: [opened, synchronize, reopened]

concurrency:
  group: preview-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Detect targets from spec
  detect-targets:
    name: Detect Build Targets
    runs-on: ubuntu-latest
    outputs:
      has-web: ${{ steps.read-spec.outputs.has-web }}
      has-backend: ${{ steps.read-spec.outputs.has-backend }}
      project-name: ${{ steps.read-spec.outputs.project-name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read BuildSpec
        id: read-spec
        run: |
          if [ -f "workspace/spec.json" ]; then
            SPEC_FILE="workspace/spec.json"
          elif [ -f "spec.json" ]; then
            SPEC_FILE="spec.json"
          else
            echo "has-web=true" >> $GITHUB_OUTPUT
            echo "has-backend=false" >> $GITHUB_OUTPUT
            echo "project-name=unknown" >> $GITHUB_OUTPUT
            exit 0
          fi

          TARGETS=$(cat $SPEC_FILE | jq -r '.targets | @json')
          PROJECT_NAME=$(cat $SPEC_FILE | jq -r '.name // "unknown"')

          echo "project-name=$PROJECT_NAME" >> $GITHUB_OUTPUT

          if echo "$TARGETS" | jq -e 'index("web")' > /dev/null; then
            echo "has-web=true" >> $GITHUB_OUTPUT
          else
            echo "has-web=false" >> $GITHUB_OUTPUT
          fi

          if echo "$TARGETS" | jq -e 'index("backend")' > /dev/null; then
            echo "has-backend=true" >> $GITHUB_OUTPUT
          else
            echo "has-backend=false" >> $GITHUB_OUTPUT
          fi

  deploy-and-test:
    name: Preview - Deploy & Test
    runs-on: ubuntu-latest
    needs: detect-targets
    timeout-minutes: 20
    permissions:
      pull-requests: write
      contents: read
    env:
      HAS_WEB: ${{ needs.detect-targets.outputs.has-web }}
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check if preview should run
        id: should_run
        run: |
          if [ "$HAS_WEB" != "true" ]; then
            echo "skip_reason=No web target in spec" >> $GITHUB_OUTPUT
            echo "should_run=false" >> $GITHUB_OUTPUT
          elif [ -z "$VERCEL_TOKEN" ]; then
            echo "skip_reason=Missing VERCEL_TOKEN secret" >> $GITHUB_OUTPUT
            echo "should_run=false" >> $GITHUB_OUTPUT
          else
            echo "should_run=true" >> $GITHUB_OUTPUT
          fi

      - name: Skip preview deployment
        if: steps.should_run.outputs.should_run != 'true'
        run: |
          echo "⏭️ Skipping preview deployment"
          echo "Reason: ${{ steps.should_run.outputs.skip_reason }}"
          exit 0

      - name: Setup Node
        if: steps.should_run.outputs.should_run == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install root deps
        if: steps.should_run.outputs.should_run == 'true'
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm i --no-audit --no-fund; fi

      - name: Install & build web
        if: steps.should_run.outputs.should_run == 'true'
        working-directory: apps/web
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm i --no-audit --no-fund; fi
          npm run build

      # Create the missing .vercel/project.json from secrets so CLI knows where to deploy
      - name: Create Vercel project file
        if: steps.should_run.outputs.should_run == 'true'
        working-directory: apps/web
        run: |
          mkdir -p .vercel
          cat > .vercel/project.json <<'JSON'
          {
            "orgId": "${{ secrets.VERCEL_ORG_ID }}",
            "projectId": "${{ secrets.VERCEL_PROJECT_ID }}"
          }
          JSON

      - name: Vercel pull (preview env)
        if: steps.should_run.outputs.should_run == 'true'
        working-directory: apps/web
        run: npx vercel pull --yes --environment=preview --token="$VERCEL_TOKEN"

      - name: Deploy to Vercel (preview)
        if: steps.should_run.outputs.should_run == 'true'
        id: deploy
        working-directory: apps/web
        run: |
          set -e
          # --prebuilt uses the build output we already created
          URL=$(npx vercel deploy --prebuilt --token="$VERCEL_TOKEN" --yes | tail -n1)
          echo "preview_url=$URL" >> "$GITHUB_OUTPUT"
          echo "Deployed preview: $URL"

      - name: UI smoke tests (soft-fail if no checklists)
        if: steps.should_run.outputs.should_run == 'true'
        env:
          PREVIEW_URL: ${{ steps.deploy.outputs.preview_url }}
        run: |
          echo "Testing against $PREVIEW_URL"
          if [ -f "checklists/auth.yaml" ]; then
            node tools/ui-runner-cli.js checklists/auth.yaml "$PREVIEW_URL" || true
          elif [ -f "checklists/web-smoke.yaml" ]; then
            node tools/ui-runner-cli.js checklists/web-smoke.yaml "$PREVIEW_URL" || true
          else
            echo "⚠️ No web smoke checklist found; skipping tests."
          fi

      - name: Upload UI screenshots
        if: always() && steps.should_run.outputs.should_run == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ui-screenshots
          path: |
            artifacts/ui/**/*
            workspace/artifacts/ui/**/*
          retention-days: 7
          if-no-files-found: ignore

      - name: Comment on PR with preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const shouldRun = '${{ steps.should_run.outputs.should_run }}' === 'true';
            const skipReason = '${{ steps.should_run.outputs.skip_reason }}';
            const previewUrl = '${{ steps.deploy.outputs.preview_url }}';
            const prNumber = context.issue.number;

            let body;
            if (!shouldRun) {
              body = `**Preview SKIPPED**

            ${skipReason}

            _Automated preview deployment._`;
            } else {
              const success = !!previewUrl;
              body = `**Preview ${success ? 'READY' : 'FAILED'}**

            ${success ? `Preview URL: ${previewUrl}` : 'Preview URL not available'}

            _Automated preview deployment._`;
            }

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });
            const prev = comments.find(c => c.user.type === 'Bot' && c.body.includes('Automated preview deployment'));
            if (prev) {
              await github.rest.issues.updateComment({ owner: context.repo.owner, repo: context.repo.repo, comment_id: prev.id, body });
            } else {
              await github.rest.issues.createComment({ owner: context.repo.owner, repo: context.repo.repo, issue_number: prNumber, body });
            }
